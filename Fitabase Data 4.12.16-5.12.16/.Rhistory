install.packages("swirl")
library(swirl)
swirl()
bye()
reticulate::repl_python()
import numpy as np
y
install.packages(c("BBmisc", "broom", "callr", "caret", "cli", "crayon", "desc", "dplyr", "dtplyr", "evaluate", "forcats", "future", "future.apply", "gargle", "globals", "googlesheets4", "gtable", "haven", "hms", "httr", "igraph", "jsonlite", "knitr", "lifecycle", "modelr", "openssl", "pillar", "progressr", "RcppArmadillo", "RCurl", "readr", "readxl", "reprex", "reticulate", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "stringr", "tibble", "tidyr", "timeDate", "tinytex", "vctrs", "viridisLite", "vroom", "xfun"))
print('Coding in R')
?p´rint()
?print()
first_variable <- "This is my variable"
second_variable <- 12.5
vec_1 <- c(13, 48.5, 71, 101.5, 2)
vec_1
typeof(c("a", "b"))
typeof(c(1L, 3L))
lenght(x)
x <- c(33.5, 57.75, 120.05)
length(x)
x <- c(2L, 5L, 11L)
is.integer(x)
names(x) <- c("a", "b", "c")
x
list("a", 1L, 1.5, TRUE)
list(list(list(1 , 3, 5)))
str(list("a", 1L, 1.5, TRUE))
z <- list(list(list(1 , 3, 5)))
str(z)
list('Chicago' = 1, 'New York' = 2, 'Los Angeles' = 3)
$Chicago
install.packages("tidyverse")
library(lubridate)
library(tidyverse)
library(lubridate)
#to get the current date you can run the today() function.
today()
now())
now()
ymd("2021-01-20")
mdy("January 20th, 2021")
ymd(20210120)
ymd_hms("2021-01-20 20:11:59")
mdy_hm("01/20/2021 08:01")
as_date(now())
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
matrix(c(3:8), nrow = 2)
matrix(c(3:8), ncol = 2)
x <- 4
print("x is a positive number")
x <- -1
print("x is a positive number")
x <- 4
if (x > 0){
print("x is a positive number")
}
print("x is a positive number")
if (x > 0){
print("x is a positive number")
}
if (x > 0){
print("x is a positive number")
}
```{r}
if (x > 0){
print("x is a positive number")
}
x <- -4
if (x > 0){
print("x is a positive number")
}
if (x > 0){
print("x is a positive number")
}
else {print("x is not a positive number")}
if (x > 0){
print("x is a positive number")
}
else (x < 0){print("x is not a positive number")}
x <- -4
if (x > 0){
print("x is a positive number")
}
else (x < 0){
if (x > 0){
print("x is a positive number")
}
else (x < 0){
if (x > 0){
print("x is a positive number")
} else {
print("x is not a positive number")
}
if (x > 0){
print("x is a positive number")
}
else {
if (x > 0){
print("x is a positive number")
} else {
print("x is not a positive number")
}
tidyverse_update()
library(tidyverse)
browseVignettes(“ggplot2”)
browseVignettes(“ggplot2”)
browseVignettes(ggplot2)
library(tidyverse)
browseVignettes('ggplot2')
data("ToothGrowth")
View("ToothGrowth")
data("ToothGrowth")
force(ToothGrowth)
View(ToothGrowth)
glimpse(ToothGrowth)
library("dplyr")
filtered_tg <- filter(ToothGrowth, dose == 0.5)
filtered_tg
arrange(filtered_tg, len)
arrange(filter(ToothGrowth, dose==0.5), len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
arrange(len)
View(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T), .group = 'drop' )
filtered_toothgrowth
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T), .groups = 'drop' )
filtered_toothgrowth
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T) )
filtered_toothgrowth
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T), .groups = 'drop' )
filtered_toothgrowth
dmy(“7-10-2020”)
dmy('7-10-2020')
myd(2020, July 10)
myd('2020, July 10')
mdy('July 10th, 2020')
library(ggplot2)
data(diamonds)
glimpse(diamonds)
library(tidyverse)
glimpse(diamonds)
head(diamonds)
str(diamonds)
colnames(diamonds)
mutate(diamonds, carat_2 = carat * 100)
library(tidyverse)
names <- c("", "", "", "")
names <- c("Ningguang", "Albedo", "Gorou", "Zhongli")
age <- c(29, 500, 25, 4000)
people <- data.frame(names, age)
head(people)
str(people)
glimpse(people)
colnames(people)
mutate(people, age_in_20 = age + 20)
fruits <- c("Apple", "Banana", "Grape",  "Pineapple", "Strawberry")
rank <- c(1, 4, 5, 2, 3)
fruit_ranks <- data_frame(fruits, rank)
fruit_ranks <- data.frame(fruits, rank)
fruit_ranks
as_tibble(diamonds)
install.packages(c("here", "janitor", "skimr"))
library("skimr")
library("janitor")
library("skimr")
library("janitor")
library("here")
library("skimr")
library("janitor")
library("here")
library("dplyr")
library("skimr") #summarizing data really easy
library("janitor") #cleans data
library("here") #makes referencing files easier
library("dplyr")
install.packages("palmerpenguins")
library(palmerpenguins)
skim_without_charts(penguins)
glimpse(penguins)
head(penguins)
penguins %>%
select(species)
penguins %>%
select(-species)  #every column but species
penguins %>%
rename(island_new = island)
rename_with(penguins, toupper)
rename_with(penguins, lower) #makes all colunm names lowercase
rename_with(penguins, tolower) #makes all colunm names lowercase
clean_names(penguins)
library(tidyverse)
penguins %>% arrange(bill_length_mm)
penguins %>% arrange(-bill_length_mm)
#saving the dataframe
peguins2 <- penguins %>% arrange(-bill_length_mm)
penguins %>%
group_by(islands) %>%
drop_na() %>%
summarise(mean_bill_lenght_mm = mean(bill_length_mm))
penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_lenght_mm = mean(bill_length_mm))
penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_lenght_mm = mean(bill_length_mm), max_bill_lengh_mm = max(bill_length_mm))
penguins %>%
group_by(, species,island) %>%
drop_na() %>%
summarise(mean_bill_lenght_mm = mean(bill_length_mm), max_bill_lengh_mm = max(bill_length_mm))
penguins %>%
group_by(species,island) %>%
drop_na() %>%
summarise(mean_bill_lenght_mm = mean(bill_length_mm), max_bill_lengh_mm = max(bill_length_mm))
penguins %>%
filter(species == "Adelie")
penguins %>% arrange(bill_length_mm)
install.packages("Tmisc")
library(Tmisc)
data("quartet")
quartet %>%
group_by(set) %>%
summarise(mean(x), sd(x), mean(y), sd(y), corr(x,y))
quartet %>%
group_by(set) %>%
summarise(mean(x), sd(x), mean(y), sd(y), cor(x,y))
ggplot(quartet, aes(x,y) + geom_point() + geom_smooth(method = lm, se= FALSE) + facet_wrap(~set))
ggplot(quartet, aes(x,y) + geom_point() + geom_smooth(method = lm, se= FALSE) + facet_wrap(~set))
ggplot(quartet, aes(x,y)) + geom_point() + geom_smooth(method = lm, se= FALSE) + facet_wrap(~set))
ggplot(quartet, aes(x,y)) + geom_point() + geom_smooth(method = lm, se= FALSE) + facet_wrap(~set)
install.packages("SimDesign")
library(SimDesign)
actual_temp <- c(68.3, 70, 72.4, 71, 67, 70)
predicted_temp <- c(67.9, 69, 71.5, 70, 67, 69)
bias(actual_temp, predicted_temp)
print('Coding in R')
?print()
first_variable <- "This is my variable"
second_variable <- 12.5
vec_1 <- c(13, 48.5, 71, 101.5, 2)
vec_1
typeof(c("a", "b"))
typeof(c(1L, 3L))
x <- c(33.5, 57.75, 120.05)
length(x)
x <- c(2L, 5L, 11L)
is.integer(x)
x <- c(1, 3, 5)
names(x) <- c("a", "b", "c")
x
list("a", 1L, 1.5, TRUE)
list(list(list(1 , 3, 5)))
str(list("a", 1L, 1.5, TRUE))
z <- list(list(list(1 , 3, 5)))
str(z)
list('Chicago' = 1, 'New York' = 2, 'Los Angeles' = 3)
library(tidyverse)
library(lubridate)
today()
now()
ymd("2021-01-20")
mdy("January 20th, 2021")
ymd(20210120)
ymd_hms("2021-01-20 20:11:59")
mdy_hm("01/20/2021 08:01")
as_date(now())
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
matrix(c(3:8), nrow = 2)
matrix(c(3:8), ncol = 2)
x <- -4
if (x > 0){
print("x is a positive number")
} else {
print("x is not a positive number")
}
tidyverse_update()
library(tidyverse)
browseVignettes('ggplot2')
data("ToothGrowth")
View(ToothGrowth)
glimpse(ToothGrowth)
library("dplyr")
filtered_tg <- filter(ToothGrowth, dose == 0.5)
filtered_tg
arrange(filtered_tg, len)
arrange(filter(ToothGrowth, dose==0.5), len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
arrange(len)
View(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T), .groups = 'drop' )
filtered_toothgrowth
mdy('July 10th, 2020')
library(tidyverse)
library(ggplot2)
data(diamonds)
glimpse(diamonds)
head(diamonds)
str(diamonds)
colnames(diamonds)
mutate(diamonds, carat_2 = carat * 100)
#install.packages("tidyverse")
library(tidyverse)
names <- c("Ningguang", "Albedo", "Gorou", "Zhongli")
age <- c(29, 500, 25, 4000)
people <- data.frame(names, age)
head(people)
str(people)
glimpse(people)
colnames(people)
mutate(people, age_in_20 = age + 20)
fruits <- c("Apple", "Banana", "Grape",  "Pineapple", "Strawberry")
rank <- c(1, 4, 5, 2, 3)
fruit_ranks <- data.frame(fruits, rank)
fruit_ranks
as_tibble(diamonds)
library("skimr") #summarizing data really easy
library("janitor") #cleans data
library("here") #makes referencing files easier
library("dplyr")
library(palmerpenguins)
skim_without_charts(penguins)
glimpse(penguins)
head(penguins)
penguins %>%
select(-species)  #every column but species
penguins %>%
rename(island_new = island)
rename_with(penguins, toupper) #makes all colunm names uppercase
rename_with(penguins, tolower) #makes all column names lowercase
clean_names(penguins)
library(tidyverse)
penguins %>% arrange(bill_length_mm)
penguins %>% arrange(-bill_length_mm)
#saving the dataframe
peguins2 <- penguins %>% arrange(-bill_length_mm)
penguins %>%
group_by(species,island) %>%
drop_na() %>%
summarise(mean_bill_lenght_mm = mean(bill_length_mm), max_bill_lengh_mm = max(bill_length_mm))
penguins %>%
filter(species == "Adelie")
install.packages("Tmisc")
library(Tmisc)
data("quartet")
quartet %>%
group_by(set) %>%
summarise(mean(x), sd(x), mean(y), sd(y), cor(x,y))
ggplot(quartet, aes(x,y)) + geom_point() + geom_smooth(method = lm, se= FALSE) + facet_wrap(~set)
install.packages("SimDesign")
library(SimDesign)
actual_temp <- c(68.3, 70, 72.4, 71, 67, 70)
predicted_temp <- c(67.9, 69, 71.5, 70, 67, 69)
bias(actual_temp, predicted_temp)
penguins %>%  drop_na() %>%  group_by(species) %>% summarize(mean( body_mass_g))
library(palmerpenguins)
library(tidyverse)
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
library(palmerpenguins)
library(tidyverse)
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g, color = species, shape = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g, color = species, shape = species, alpha = 0.7))
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g, color = species, shape = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g, alpha = species, shape = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g, alpha = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g),
color = 'purple')
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_lenght_mm, y = body_mass_g,
linetype = species))
colnames(penguins)
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g,
linetype = species))
ggplot(data = penguins) +
geom_jitter(mapping = aes(x = flipper_length_mm, y = body_mass_g,
linetype = species))
ggplot(data = penguins) +
geom_jitter(mapping = aes(x = flipper_length_mm, y = body_mass_g,
))
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g)) +
facet_wrap(~species)
``ggplot(data = penguins) +
``ggplot(data = penguins) +
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g)) +
facet_grid(~species)
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g), color = species) +
facet_wrap(~species)
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g, color = species)) +
facet_wrap(~species)
ggplot(data = penguins) +
geom_bar(mapping = aes(x= color, fill=cut)) +
facet_wrap(~cut)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x= color, fill=cut)) +
facet_wrap(~cut)
ggplot(data = penguins) +
geom_point(mapping = aes(x= flipper_length_mm, y= body_mass_g, color = species)) +
facet_grid(sex~species)
ggplot(data = penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color = species)) +
labs(title = 'Palmer Penguins: Body Mass vs. Flipper Length', subtitle ='sdjksjdsdsk', caption = 'Data collected by Dr. Kriten Gorman') +
annotate("text", x= 220, y=3500, label='The Gentoos are the largest')
ggplot(data = penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color = species)) +
labs(title = 'Palmer Penguins: Body Mass vs. Flipper Length', subtitle ='sdjksjdsdsk', caption = 'Data collected by Dr. Kriten Gorman') +
annotate("text", x= 220, y=3500, label='The Gentoos are the largest', color= 'Purple', fontface='bold', size=4.5)
ggplot(data = penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color = species)) +
labs(title = 'Palmer Penguins: Body Mass vs. Flipper Length', subtitle ='sdjksjdsdsk', caption = 'Data collected by Dr. Kriten Gorman') +
annotate("text", x= 220, y=3500, label='The Gentoos are the largest', color= 'Purple', fontface='bold', size=4.5, angle=25)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
labs(title = 'Penguins')
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = color, fill = cut)) + facet_wrap(~color)
ggplot(data = penguins) + 
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species))
library(tidyverse)
setwd("C:/Users/SAMSUNG/OneDrive/Documentos/data_science/Fitabase Data 4.12.16-5.12.16")
setwd("C:/Users/SAMSUNG/OneDrive/Documentos/data_science/Fitabase Data 4.12.16-5.12.16")
getwd(
getwd()
setwd("C:/Users/SAMSUNG/OneDrive/Documentos/data_science/Fitabase Data 4.12.16-5.12.16")
read.csv("dailyActivity_merged.csv)
read_csv("dailyActivity_merged.csv)
daily_activity <- read_csv("dailyActivity_merged.csv)
daily_activity <- read_csv("dailyActivity_merged.csv")
setwd("C:/Users/SAMSUNG/OneDrive/Documentos/data_science/Fitabase Data 4.12.16-5.12.16")
daily_activity <- read_csv("dailyActivity_merged.csv")
heart_rate<- read_csv("heartrate_seconds_merged.csv")
sleep_day <- read.csv("sleepDay_merged.csv")
weight <- read_csv("weightLogInfo_merged.csv")
glimpse(daily_activity)
str(daily_activity)
View(daily_activity)
